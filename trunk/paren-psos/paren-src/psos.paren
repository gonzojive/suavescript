(defvar standard-object -Object)

(defun2 link-supers-to-subclass (direct-superclasses subclass)
  (dolist (sclass direct-superclasses)
    (if sclass.direct-subclasses
	(sclass.direct-subclasses.push subclass)
	(setf sclass.direct-subclasses (array subclass)))))

(defun2 generate-std-class-constructor ()
  "This function returns a function that acts as a constructor for any class
in the PSOS system.  This function does nothing if an init-arg 'only-allocate' is passed
in as true.  This means that constructor is being called to allocate an instance of the
class without instantiating it in any way, and is a necessary hack to make javascript
prototyping function correctly.

A note on how javascript constructors work: a constructor can either modify the 'this' object
 or return a new object that is the new instance.  The latter is what EVERY psos-class
constructor does except for raw allocations."
  (return
    (lambda (init-args)
      (if (not (and init-args init-args.only-allocate))
	  (return (make-instance (class-of this) init-args))))))

(defvar global-class-counter 0)
(defun2 std-class-make-instance (metaclass &key name
					   (direct-superclasses (array standard-object))
					   slot-definitions
					   documentation
					   merge-prototypes)
  "Bootstrapping version of make-instance for creating a standard class.
Note: slot-defs are currently ignored because slots are defined at compile-time."
  (let ((class-obj (generate-std-class-constructor)))
    (setf class-obj.class-name name)
    (setf class-obj.psos-id (global-class-counter.to-string))
    (incf global-class-counter)
    (setf class-obj.direct-superclasses direct-superclasses)
    (setf class-obj.to-string (lambda () (return (+ "<PSOS:Class " name ">"))))
    (setf class-obj.constructor metaclass)
    (std-finalize-inheritance class-obj)
    (when merge-prototypes
      (lispy-apply merge-into class-obj.prototype
		   (class-obj.direct-superclasses.map
		    (lambda (cls) (return cls.prototype)))))
    (return class-obj)))

(defun2 std-class-finalize-inheritance (metaclass)
  "Bootstrapping version of finalize-inheritance."
  (setf class-obj.precedence-list
	nil))
;  (setf metaclass.precedence

(defun2 std-finalize-inheritance (class-obj)
  ;add direct subclass information to all superclasses
  (link-supers-to-subclass class-obj.direct-superclasses class-obj)
  ;compute and store the class precedence list
  (setf class-obj.precedence-list (compute-precedence-list class-obj)))

(defun2 sort-class-precedence-list (class-list)
  "Sorts the class precedence list with a topological sort. right now, it doesn't do anything."
  (return class-list))

(defun collect-superclasses (the-class)
  (return (remove-duplicates
	   (if the-class.direct-superclasses
	       (the-class.direct-superclasses.concat.apply
		the-class.direct-superclasses	       
		(the-class.direct-superclasses.map collect-superclasses))
	       (array)))))

(defun compute-precedence-list (the-class)
  (return ((slot-value (array the-class) 'concat)
	   (sort-class-precedence-list
		      (collect-superclasses the-class)))))

(defun2 ensure-class (class-obj &key (metaclass standard-class))
  "Ensures that a class exists that complies with the given options.  If it does not find
a class it creates one, and if it finds one it attempts to redefine it.  This is sometimes not
entirely possible (e.g. when a standard-funcallable-class is redefined as a standard class)."
;  (log (+ "ensuring that the class exists " class-obj " " (== class-obj standard-class)))
   ; detect the standard class for boot-strapping purposes
  (return (if (== metaclass standard-class)
	      (std-class-make-instance metaclass options)
	      (make-instance metaclass options))))

;; method dispatch functionality

(defun2 ensure-generic (existing-version &key (generic-class standard-generic-function) name)
  "Ensures that the existing generic function exists and conforms to the supplied options"
  (return
    (if (and existing-version existing-version.generic-methods)
	existing-version
	(if (== standard-generic-function generic-class)
	    (std-generic-make-instance generic-class options)
	    (make-instance generic-class options)))))

(defun std-generic-add-method (generic method)
  (setf generic.cached-method-combo (create)) ; reset method cache hash
  (generic.generic-methods.push method))

(defun2 std-generic-make-instance (generic-class &key name)
  "Makes a standard generic function."
  (let ((concrete-function (generate-callable-method)))
    (setf concrete-function.generic-methods (array))
    (setf concrete-function.generic-name name)
    (setf concrete-function.cached-method-combo (create))
    (setf concrete-function.to-string
	  (lambda () (return (+ "<PSOS:Generic " concrete-function.generic-name ">"))))
    (return concrete-function)))

(defun2 apply-std-method-combination (method-combo args-arr)
  "Applies a set of arguments to a bunch of primary, before, and after methods.  These
primary, before, and after methods are passed in most-specific-first."
  (when (== 0 method-combo.primaries.length)
    (log (+ "No applicable methods for generic function call " method-combo.generic.generic-name " with args") :error)
    (log args-arr :error)
    (log (args-arr.map class-of) :error))
  (let ((ret-val undefined)
	(befores method-combo.befores)
	(afters method-combo.afters)
	(primaries (method-combo.primaries.slice 0)))
    (dolist (bmeth befores)
      (bmeth.apply nil args-arr))
    (let ((this-obj
	   (create
	    :primary-methods primaries
	    :call-following-method
	    (lambda ()
	      (if (== 0 this.primary-methods.length)
		  (return undefined))
	      (return ((slot-value (this.primary-methods.shift) 'apply)
		       this
		       (if (== 0 arguments.length)
			   args-arr
			   arguments))) ))))
      (setf ret-val (this-obj.call-following-method)))
    (dolist2 (ameth afters :backward)
	     (ameth.apply nil args-arr))
    (return ret-val)))

(defun2 compute-effective-method-combination (generic args-arr)
  (defvar qualifer-matcher 
    (lambda (str) (return (lambda (meth) (return (== str meth.qualifier))))))
  (let ((applicable-methods
	 (compute-applicable-methods generic args-arr))
	(effective-method-combo
	 (create :generic generic
;		:arounds (applicable-methods.filter
;			    (lambda (meth) (return (== meth.qualifier "around"))))
		 :primaries (applicable-methods.filter (qualifer-matcher "primary"))
		 :befores (applicable-methods.filter (qualifer-matcher "before"))
		 :afters (applicable-methods.filter (qualifer-matcher "after")))))
    (return effective-method-combo)))
    
(defun2 generate-callable-method ()
  "Returns a new function that serves as the executable function for a generic function.
Compute-applicable-methods and subsequent steps like the primaries, befores, afters
filtering could all be cached."
  (return
    (lambda ()
      (let ((args (to-array arguments))
	    (generic arguments.callee)
	    (call-signature
	     ((slot-value (args.map (lambda (arg)
				      (defvar the-class (class-of arg))
				      (return (or (and the-class (slot-value the-class 'psos-id))
						  (typeof arg)))))
			  'join)))
	    (effective-method-combo
	     (or (slot-value generic.cached-method-combo call-signature)
		       (compute-effective-method-combination generic args))))
;	(log (+ "caching method call to " generic.generic-name ": " call-signature))
;	(log effective-method-combo)
	(setf (slot-value generic.cached-method-combo call-signature)
	      effective-method-combo)
	(return (apply-std-method-combination effective-method-combo args))))))

(defun2 ensure-method (concrete-generic specializer-list concrete-function &optional (qualifier "primary"))
  "A specializer list is a list of classes at the places where normal arguments
are normally passed.  So if a method specializes the second argument with
the class Ball, it the specializer list would be [null, ball, ...]
the second argument is the function to be called when this method is called"
  (setf concrete-function.qualifier qualifier)
  (setf concrete-function.specializer-list specializer-list)
  (std-generic-add-method concrete-generic concrete-function)
  (return concrete-function))

(defun is-subclass-of (specializer test-class)
  (return
    (if (== specializer test-class)
	t
	(and specializer.direct-subclasses
	     (specializer.direct-subclasses.some
	      (lambda (deeper-specializer)
		(return (is-subclass-of deeper-specializer test-class))))))))

(defun specializer-fits-class? (specializer the-class)
  ;(log (+ "Specializer / Class: " specializer " / " the-class))
  (if (== nil specializer)
      (return t)
      (return (is-subclass-of 
	       specializer the-class))))

(defun superclass-more-specific? (on-class super1 super2)
  (if (== nil on-class.precedence-list)
      (return nil))
  (dolist (cur-super on-class.precedence-list)
    (if (== super1 cur-super)
	(return t))
    (if (== super2 cur-super)
	(return nil)))
  (return nil))

(defun specializer-list-specificity-comparator (class-list speclist1 speclist2)
  (dotimes (index class-list.length)
    (let ((test-class (slot-value class-list index))
	  (spec1 (slot-value speclist1 index))
	  (spec2 (slot-value speclist2 index)))
      (return (if (!= spec1 spec2)
		  (if (superclass-more-specific? test-class spec1 spec2)
		      -1
		      1)
		  0)))))

(defun compute-applicable-methods (concrete-generic args)
  "Computers the methods that are applicable to the given generic function when passed
args.  Right now it looks through all the method specializers."
  (let ((classes-of-args (args.map (lambda (arg) (return (class-of arg)))))
	(applicable-methods
	 (concrete-generic.generic-methods.filter
	  (lambda (meth) (return (specializer-list-applicable?
				  meth.specializer-list
				  args)))))
	(final-method-list
	 (applicable-methods.sort
	  (lambda (meth1 meth2)
	    (return (specializer-list-specificity-comparator
		     classes-of-args
		     meth1.specializer-list meth2.specializer-list))))))
    (return final-method-list)))
		
(defun specializer-list-applicable? (specializer-list method-arguments)
  (let ((method-classes (method-arguments.map class-of)))
    (let ((fit-results
	   (lispy-map specializer-fits-class?
		      specializer-list
		      method-classes)))
      (return
	(fit-results.every
	 (Lambda (item) (return item)))))))

;; Bootstrapping
; 1. Create the standard class.
(defvar standard-class (std-class-make-instance
			nil
			(create :name "standard-class"
				:direct-superclasses (array standard-object))))
; 2. Set up the circular reference for standard-class's class, standard-class.
(setf standard-class.constructor standard-class)

; 3. Define built-in classes
(defclass standard-generic-function ()
  ()
  (:documentation "The parent class of generic functions."))

(defclass standard-method ()
  ()
  (:documentation "The parent class of generic functions."))

; built-in classes/generic functions

(defgeneric make-instance (of-class options)
  (:documentation "Creates and initializes (by default) an instance of the given class."))
(defgeneric allocate-instance (of-class options)
  (:documentation "Allocates an instance without initializing it."))
(defgeneric initialize-instance (instance options)
  (:documentation "Called to initialize an instance with the given initargs.  Default behavior
is to merge the initargs into the instance for slot instantiation."))

(defvar init-instance initialize-instance)

(defmethod allocate-instance ((of-class standard-class) options)
  (return (new (of-class (create :only-allocate t)))))

(defmethod make-instance ((of-class standard-class) &optional (options (create)))
  (let ((instance (allocate-instance.apply this arguments)))
    (return (or (initialize-instance instance options)
		instance))))

(defmethod initialize-instance ((instance standard-object) options)
  (merge-into instance options))

;;; public interface follows ;;;
;;; select implementation from AMOP p.50
(defmethod class-name ((class-obj standard-class))
  (return class-obj.class-name))

(defmethod class-direct-superclasses ((class-obj standard-class))
  (return class-obj.direct-superclasses))

(defmethod class-direct-subclasses ((class-obj standard-class))
  (return class-obj.direct-subclasses))

(defmethod class-precedence-list ((class-obj standard-class))
  (return class-obj.precedence-list))

(defmethod class-direct-methods ((class-obj standard-class))
  (log "unsupported method" :error))

(defmethod class-default-direct-superclasses ((class-obj standard-class))
  (return (array -object)))

(defmethod generic-name ((generic standard-generic-function))
  (return generic.generic-name))

(defun class-of (obj)
  (return (if obj
	      (or obj.psos-metaclass obj.constructor)
	      nil)))

(defmethod class-default-direct-superclasses ((class-obj standard-class))
  (return (array -object)))
